/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PostAnchorInterface extends Interface {
  getFunction(
    nameOrSignature: "anchorPost" | "getVersion" | "hashCID" | "hashMetadata"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PostAnchored"): EventFragment;

  encodeFunctionData(
    functionFragment: "anchorPost",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hashCID", values: [string]): string;
  encodeFunctionData(
    functionFragment: "hashMetadata",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "anchorPost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashCID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashMetadata",
    data: BytesLike
  ): Result;
}

export namespace PostAnchoredEvent {
  export type InputTuple = [
    author: AddressLike,
    cidHash: BytesLike,
    timestamp: BigNumberish,
    metaHash: BytesLike
  ];
  export type OutputTuple = [
    author: string,
    cidHash: string,
    timestamp: bigint,
    metaHash: string
  ];
  export interface OutputObject {
    author: string;
    cidHash: string;
    timestamp: bigint;
    metaHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PostAnchor extends BaseContract {
  connect(runner?: ContractRunner | null): PostAnchor;
  waitForDeployment(): Promise<this>;

  interface: PostAnchorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  anchorPost: TypedContractMethod<
    [cidHash: BytesLike, metaHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getVersion: TypedContractMethod<[], [string], "view">;

  hashCID: TypedContractMethod<[cid: string], [string], "view">;

  hashMetadata: TypedContractMethod<[metadata: string], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "anchorPost"
  ): TypedContractMethod<
    [cidHash: BytesLike, metaHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hashCID"
  ): TypedContractMethod<[cid: string], [string], "view">;
  getFunction(
    nameOrSignature: "hashMetadata"
  ): TypedContractMethod<[metadata: string], [string], "view">;

  getEvent(
    key: "PostAnchored"
  ): TypedContractEvent<
    PostAnchoredEvent.InputTuple,
    PostAnchoredEvent.OutputTuple,
    PostAnchoredEvent.OutputObject
  >;

  filters: {
    "PostAnchored(address,bytes32,uint256,bytes32)": TypedContractEvent<
      PostAnchoredEvent.InputTuple,
      PostAnchoredEvent.OutputTuple,
      PostAnchoredEvent.OutputObject
    >;
    PostAnchored: TypedContractEvent<
      PostAnchoredEvent.InputTuple,
      PostAnchoredEvent.OutputTuple,
      PostAnchoredEvent.OutputObject
    >;
  };
}
