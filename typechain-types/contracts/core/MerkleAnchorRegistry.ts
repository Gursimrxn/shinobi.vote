/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MerkleAnchorRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MAX_ROOTS_PER_USER"
      | "REGISTRAR_ROLE"
      | "batchRegisterMerkleRoots"
      | "emergencyPause"
      | "getRoleAdmin"
      | "getRootOwner"
      | "getRootsByUser"
      | "getTotalActiveRoots"
      | "getUserRootCount"
      | "grantRole"
      | "hasRole"
      | "isRootRegistered"
      | "registerMerkleRoot"
      | "removeRoot"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "verifyProof"
      | "verifyProofWithRoot"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencyAction"
      | "MerkleRootRegistered"
      | "MerkleRootRemoved"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ROOTS_PER_USER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTRAR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchRegisterMerkleRoots",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRootOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRootsByUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalActiveRoots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRootCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRootRegistered",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [AddressLike, BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProofWithRoot",
    values: [BytesLike, BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ROOTS_PER_USER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTRAR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchRegisterMerkleRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRootOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRootsByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalActiveRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRootCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRootRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProofWithRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace EmergencyActionEvent {
  export type InputTuple = [admin: AddressLike, action: string];
  export type OutputTuple = [admin: string, action: string];
  export interface OutputObject {
    admin: string;
    action: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MerkleRootRegisteredEvent {
  export type InputTuple = [user: AddressLike, root: BytesLike];
  export type OutputTuple = [user: string, root: string];
  export interface OutputObject {
    user: string;
    root: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MerkleRootRemovedEvent {
  export type InputTuple = [user: AddressLike, root: BytesLike];
  export type OutputTuple = [user: string, root: string];
  export interface OutputObject {
    user: string;
    root: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MerkleAnchorRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): MerkleAnchorRegistry;
  waitForDeployment(): Promise<this>;

  interface: MerkleAnchorRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_ROOTS_PER_USER: TypedContractMethod<[], [bigint], "view">;

  REGISTRAR_ROLE: TypedContractMethod<[], [string], "view">;

  batchRegisterMerkleRoots: TypedContractMethod<
    [roots: BytesLike[]],
    [void],
    "nonpayable"
  >;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRootOwner: TypedContractMethod<[root: BytesLike], [string], "view">;

  getRootsByUser: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  getTotalActiveRoots: TypedContractMethod<[], [bigint], "view">;

  getUserRootCount: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isRootRegistered: TypedContractMethod<[root: BytesLike], [boolean], "view">;

  registerMerkleRoot: TypedContractMethod<
    [root: BytesLike],
    [void],
    "nonpayable"
  >;

  removeRoot: TypedContractMethod<[root: BytesLike], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  verifyProof: TypedContractMethod<
    [user: AddressLike, proof: BytesLike[], leaf: BytesLike],
    [boolean],
    "view"
  >;

  verifyProofWithRoot: TypedContractMethod<
    [root: BytesLike, proof: BytesLike[], leaf: BytesLike],
    [boolean],
    "view"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_ROOTS_PER_USER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REGISTRAR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "batchRegisterMerkleRoots"
  ): TypedContractMethod<[roots: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRootOwner"
  ): TypedContractMethod<[root: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRootsByUser"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTotalActiveRoots"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserRootCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRootRegistered"
  ): TypedContractMethod<[root: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerMerkleRoot"
  ): TypedContractMethod<[root: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeRoot"
  ): TypedContractMethod<[root: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyProof"
  ): TypedContractMethod<
    [user: AddressLike, proof: BytesLike[], leaf: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyProofWithRoot"
  ): TypedContractMethod<
    [root: BytesLike, proof: BytesLike[], leaf: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "EmergencyAction"
  ): TypedContractEvent<
    EmergencyActionEvent.InputTuple,
    EmergencyActionEvent.OutputTuple,
    EmergencyActionEvent.OutputObject
  >;
  getEvent(
    key: "MerkleRootRegistered"
  ): TypedContractEvent<
    MerkleRootRegisteredEvent.InputTuple,
    MerkleRootRegisteredEvent.OutputTuple,
    MerkleRootRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "MerkleRootRemoved"
  ): TypedContractEvent<
    MerkleRootRemovedEvent.InputTuple,
    MerkleRootRemovedEvent.OutputTuple,
    MerkleRootRemovedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "EmergencyAction(address,string)": TypedContractEvent<
      EmergencyActionEvent.InputTuple,
      EmergencyActionEvent.OutputTuple,
      EmergencyActionEvent.OutputObject
    >;
    EmergencyAction: TypedContractEvent<
      EmergencyActionEvent.InputTuple,
      EmergencyActionEvent.OutputTuple,
      EmergencyActionEvent.OutputObject
    >;

    "MerkleRootRegistered(address,bytes32)": TypedContractEvent<
      MerkleRootRegisteredEvent.InputTuple,
      MerkleRootRegisteredEvent.OutputTuple,
      MerkleRootRegisteredEvent.OutputObject
    >;
    MerkleRootRegistered: TypedContractEvent<
      MerkleRootRegisteredEvent.InputTuple,
      MerkleRootRegisteredEvent.OutputTuple,
      MerkleRootRegisteredEvent.OutputObject
    >;

    "MerkleRootRemoved(address,bytes32)": TypedContractEvent<
      MerkleRootRemovedEvent.InputTuple,
      MerkleRootRemovedEvent.OutputTuple,
      MerkleRootRemovedEvent.OutputObject
    >;
    MerkleRootRemoved: TypedContractEvent<
      MerkleRootRemovedEvent.InputTuple,
      MerkleRootRemovedEvent.OutputTuple,
      MerkleRootRemovedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
