/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ModeratorRegistry {
  export type TaskStruct = {
    id: BytesLike;
    claimer: AddressLike;
    status: BigNumberish;
    attestationHash: BytesLike;
  };

  export type TaskStructOutput = [
    id: string,
    claimer: string,
    status: bigint,
    attestationHash: string
  ] & { id: string; claimer: string; status: bigint; attestationHash: string };
}

export interface ModeratorRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "STATUS_CLAIMED"
      | "STATUS_RESOLVED"
      | "STATUS_UNCLAIMED"
      | "claimTask"
      | "getModeratorCount"
      | "getRoleAdmin"
      | "getTask"
      | "grantRole"
      | "hasRole"
      | "isModerator"
      | "optInModerator"
      | "optOutModerator"
      | "removeModerator"
      | "renounceRole"
      | "resetTask"
      | "resolveTask"
      | "revokeRole"
      | "supportsInterface"
      | "taskExists"
      | "tasks"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ModeratorOptedIn"
      | "ModeratorOptedOut"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TaskClaimed"
      | "TaskResolved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STATUS_CLAIMED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STATUS_RESOLVED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STATUS_UNCLAIMED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimTask",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getModeratorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getTask", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isModerator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "optInModerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optOutModerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeModerator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resetTask",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveTask",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "taskExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "tasks", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STATUS_CLAIMED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STATUS_RESOLVED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STATUS_UNCLAIMED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getModeratorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isModerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optInModerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optOutModerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeModerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolveTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taskExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tasks", data: BytesLike): Result;
}

export namespace ModeratorOptedInEvent {
  export type InputTuple = [moderator: AddressLike];
  export type OutputTuple = [moderator: string];
  export interface OutputObject {
    moderator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModeratorOptedOutEvent {
  export type InputTuple = [moderator: AddressLike];
  export type OutputTuple = [moderator: string];
  export interface OutputObject {
    moderator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskClaimedEvent {
  export type InputTuple = [taskId: BytesLike, claimer: AddressLike];
  export type OutputTuple = [taskId: string, claimer: string];
  export interface OutputObject {
    taskId: string;
    claimer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskResolvedEvent {
  export type InputTuple = [taskId: BytesLike, attestationHash: BytesLike];
  export type OutputTuple = [taskId: string, attestationHash: string];
  export interface OutputObject {
    taskId: string;
    attestationHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ModeratorRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ModeratorRegistry;
  waitForDeployment(): Promise<this>;

  interface: ModeratorRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  STATUS_CLAIMED: TypedContractMethod<[], [bigint], "view">;

  STATUS_RESOLVED: TypedContractMethod<[], [bigint], "view">;

  STATUS_UNCLAIMED: TypedContractMethod<[], [bigint], "view">;

  claimTask: TypedContractMethod<[taskId: BytesLike], [void], "nonpayable">;

  getModeratorCount: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTask: TypedContractMethod<
    [taskId: BytesLike],
    [ModeratorRegistry.TaskStructOutput],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isModerator: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  optInModerator: TypedContractMethod<[], [void], "nonpayable">;

  optOutModerator: TypedContractMethod<[], [void], "nonpayable">;

  removeModerator: TypedContractMethod<
    [moderator: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  resetTask: TypedContractMethod<[taskId: BytesLike], [void], "nonpayable">;

  resolveTask: TypedContractMethod<
    [taskId: BytesLike, attestationHash: BytesLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  taskExists: TypedContractMethod<[taskId: BytesLike], [boolean], "view">;

  tasks: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, string] & {
        id: string;
        claimer: string;
        status: bigint;
        attestationHash: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STATUS_CLAIMED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STATUS_RESOLVED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STATUS_UNCLAIMED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimTask"
  ): TypedContractMethod<[taskId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getModeratorCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTask"
  ): TypedContractMethod<
    [taskId: BytesLike],
    [ModeratorRegistry.TaskStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isModerator"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "optInModerator"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "optOutModerator"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeModerator"
  ): TypedContractMethod<[moderator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resetTask"
  ): TypedContractMethod<[taskId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveTask"
  ): TypedContractMethod<
    [taskId: BytesLike, attestationHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "taskExists"
  ): TypedContractMethod<[taskId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tasks"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, string] & {
        id: string;
        claimer: string;
        status: bigint;
        attestationHash: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ModeratorOptedIn"
  ): TypedContractEvent<
    ModeratorOptedInEvent.InputTuple,
    ModeratorOptedInEvent.OutputTuple,
    ModeratorOptedInEvent.OutputObject
  >;
  getEvent(
    key: "ModeratorOptedOut"
  ): TypedContractEvent<
    ModeratorOptedOutEvent.InputTuple,
    ModeratorOptedOutEvent.OutputTuple,
    ModeratorOptedOutEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TaskClaimed"
  ): TypedContractEvent<
    TaskClaimedEvent.InputTuple,
    TaskClaimedEvent.OutputTuple,
    TaskClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TaskResolved"
  ): TypedContractEvent<
    TaskResolvedEvent.InputTuple,
    TaskResolvedEvent.OutputTuple,
    TaskResolvedEvent.OutputObject
  >;

  filters: {
    "ModeratorOptedIn(address)": TypedContractEvent<
      ModeratorOptedInEvent.InputTuple,
      ModeratorOptedInEvent.OutputTuple,
      ModeratorOptedInEvent.OutputObject
    >;
    ModeratorOptedIn: TypedContractEvent<
      ModeratorOptedInEvent.InputTuple,
      ModeratorOptedInEvent.OutputTuple,
      ModeratorOptedInEvent.OutputObject
    >;

    "ModeratorOptedOut(address)": TypedContractEvent<
      ModeratorOptedOutEvent.InputTuple,
      ModeratorOptedOutEvent.OutputTuple,
      ModeratorOptedOutEvent.OutputObject
    >;
    ModeratorOptedOut: TypedContractEvent<
      ModeratorOptedOutEvent.InputTuple,
      ModeratorOptedOutEvent.OutputTuple,
      ModeratorOptedOutEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TaskClaimed(bytes32,address)": TypedContractEvent<
      TaskClaimedEvent.InputTuple,
      TaskClaimedEvent.OutputTuple,
      TaskClaimedEvent.OutputObject
    >;
    TaskClaimed: TypedContractEvent<
      TaskClaimedEvent.InputTuple,
      TaskClaimedEvent.OutputTuple,
      TaskClaimedEvent.OutputObject
    >;

    "TaskResolved(bytes32,bytes32)": TypedContractEvent<
      TaskResolvedEvent.InputTuple,
      TaskResolvedEvent.OutputTuple,
      TaskResolvedEvent.OutputObject
    >;
    TaskResolved: TypedContractEvent<
      TaskResolvedEvent.InputTuple,
      TaskResolvedEvent.OutputTuple,
      TaskResolvedEvent.OutputObject
    >;
  };
}
