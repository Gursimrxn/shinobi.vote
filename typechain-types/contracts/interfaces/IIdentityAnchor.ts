/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IIdentityAnchorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getIdentity"
      | "hasIdentity"
      | "isCommitmentRegistered"
      | "registerIdentity"
      | "registerIdentityFor"
      | "updateIdentity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "IdentityRegistered" | "IdentityUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getIdentity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasIdentity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCommitmentRegistered",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerIdentity",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerIdentityFor",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIdentity",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCommitmentRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerIdentityFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIdentity",
    data: BytesLike
  ): Result;
}

export namespace IdentityRegisteredEvent {
  export type InputTuple = [
    user: AddressLike,
    commitment: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    commitment: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    commitment: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IdentityUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    oldCommitment: BytesLike,
    newCommitment: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    oldCommitment: string,
    newCommitment: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    oldCommitment: string;
    newCommitment: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IIdentityAnchor extends BaseContract {
  connect(runner?: ContractRunner | null): IIdentityAnchor;
  waitForDeployment(): Promise<this>;

  interface: IIdentityAnchorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getIdentity: TypedContractMethod<[user: AddressLike], [string], "view">;

  hasIdentity: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  isCommitmentRegistered: TypedContractMethod<
    [commitment: BytesLike],
    [boolean],
    "view"
  >;

  registerIdentity: TypedContractMethod<
    [commitment: BytesLike],
    [void],
    "nonpayable"
  >;

  registerIdentityFor: TypedContractMethod<
    [user: AddressLike, commitment: BytesLike],
    [void],
    "nonpayable"
  >;

  updateIdentity: TypedContractMethod<
    [newCommitment: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getIdentity"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "hasIdentity"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCommitmentRegistered"
  ): TypedContractMethod<[commitment: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerIdentity"
  ): TypedContractMethod<[commitment: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerIdentityFor"
  ): TypedContractMethod<
    [user: AddressLike, commitment: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateIdentity"
  ): TypedContractMethod<[newCommitment: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "IdentityRegistered"
  ): TypedContractEvent<
    IdentityRegisteredEvent.InputTuple,
    IdentityRegisteredEvent.OutputTuple,
    IdentityRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "IdentityUpdated"
  ): TypedContractEvent<
    IdentityUpdatedEvent.InputTuple,
    IdentityUpdatedEvent.OutputTuple,
    IdentityUpdatedEvent.OutputObject
  >;

  filters: {
    "IdentityRegistered(address,bytes32,uint256)": TypedContractEvent<
      IdentityRegisteredEvent.InputTuple,
      IdentityRegisteredEvent.OutputTuple,
      IdentityRegisteredEvent.OutputObject
    >;
    IdentityRegistered: TypedContractEvent<
      IdentityRegisteredEvent.InputTuple,
      IdentityRegisteredEvent.OutputTuple,
      IdentityRegisteredEvent.OutputObject
    >;

    "IdentityUpdated(address,bytes32,bytes32,uint256)": TypedContractEvent<
      IdentityUpdatedEvent.InputTuple,
      IdentityUpdatedEvent.OutputTuple,
      IdentityUpdatedEvent.OutputObject
    >;
    IdentityUpdated: TypedContractEvent<
      IdentityUpdatedEvent.InputTuple,
      IdentityUpdatedEvent.OutputTuple,
      IdentityUpdatedEvent.OutputObject
    >;
  };
}
